def a():
five = 5
def b():
def c():
return five;
return c()
return b()
a()
123
qe3
1e3
knitr::opts_chunk$set(echo = TRUE)
num_param_sims <- 1e4
xbar <- mean(x)
ybar <- mean(y)
m <- length(x)
n <- length(y)
x <- rnorm(10, 0, 1)
y <- rnorm(7, .01, 1.2)
num_param_sims <- 1e4
xbar <- mean(x)
ybar <- mean(y)
m <- length(x)
n <- length(y)
shape <- .5*(m + n - 2)
scale <- sum(x^2) + sum(y^2) + m*(xbar^2) + n(ybar^2)
m <- length(x)
n <- length(y)
shape <- .5*(m + n - 2)
scale <- sum(x^2) + sum(y^2) + m*(xbar^2) + n*(ybar^2)
?rgamma
rnorm(n = 2, sd = c(.001, 10))
rnorm(n = 2, sd = c(.001, 10))
rnorm(n = 2, sd = c(.001, 10))
rnorm(n = 2, sd = c(.001, 10))
rnorm(n = 2, sd = c(.001, 10))
rnorm(n = 2, sd = c(.001, 10))
rnorm(n = 2, sd = c(.001, 10))
rnorm(n = 2, sd = c(.001, 10))
num_param_sims <- 1e4
xbar <- mean(x)
ybar <- mean(y)
m <- length(x)
n <- length(y)
shape <- .5*(m + n - 2)
scale <- sum(x^2) + sum(y^2) + m*(xbar^2) + n*(ybar^2)
ssSims <- 1/rgamma(num_param_sims, shape = shape, scale = scale)
mu1Sims <- rnorm(n = num_param_sims, mean = xbar, sd = sqrt(ssSims/m))
mu2Sims <- rnorm(n = num_param_sims, mean = ybar, sd = sqrt(ssSims/n))
hist(mu1Sims - mu2Sims)
?ecdf
ecdf(mu1Sims - mu2Sims)
g <- ecdf(mu1Sims - mu2Sims)
g(2)
hist(mu1Sims - mu2Sims)
g(.7)
g(.8)
?uniroot
c(abs(x),abs(y)
)
max(c(abs(x),abs(y)))
# solve $F(c) - F(-c) = .95
uniroot(function(x){ cdf(x) - cdf(-x) - confidence}, 0, max(c(abs(x),abs(y))) )
# solve $F(c) - F(-c) = .95
uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )
cdf <- ecdf(mu1Sims - mu2Sims)
# solve $F(c) - F(-c) = .95
uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )
confidence <- .95
cdf <- ecdf(mu1Sims - mu2Sims)
# solve $F(c) - F(-c) = .95
uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )
# solve $F(c) - F(-c) = .95
uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )$root
# solve $F(c) - F(-c) = .95
c <- uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )$root
# solve $F(c) - F(-c) = .95
c <- uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )$root
hist(mu1Sims - mu2Sims)
abline(v=c, col="red")
abline(v=-c, col="red")
hist(mu1Sims - mu2Sims)
abline(v=c, col="red")
c
knitr::opts_chunk$set(echo = TRUE)
hist(mu1Sims - mu2Sims) + abline(v=c, col="red")
mu1Sims
mu2Sims
mu1Sims - mu2Sims
hist(mu1Sims - mu2Sims)# + abline(v=c, col="red")
num_param_sims <- 1e4
confidence <- .95
xbar <- mean(x)
ybar <- mean(y)
m <- length(x)
n <- length(y)
shape <- .5*(m + n - 2)
scale <- sum(x^2) + sum(y^2) + m*(xbar^2) + n*(ybar^2)
ssSims <- 1/rgamma(num_param_sims, shape = shape, scale = scale)
mu1Sims <- rnorm(n = num_param_sims, mean = xbar, sd = sqrt(ssSims/m))
mu2Sims <- rnorm(n = num_param_sims, mean = ybar, sd = sqrt(ssSims/n))
cdf <- ecdf(mu1Sims - mu2Sims)
# solve $F(c) - F(-c) = .95
upper <- uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )$root
hist(mu1Sims - mu2Sims)
abline(v=upper,col="red")
# num_param_sims <- 1e4
# confidence <- .95
getCoolThing <- function(x, y, confidence, num_param_sims, plot=FALSE, relative = FALSE){
xbar <- mean(x)
ybar <- mean(y)
m <- length(x)
n <- length(y)
shape <- .5*(m + n - 2)
scale <- sum(x^2) + sum(y^2) + m*(xbar^2) + n*(ybar^2)
ssSims <- 1/rgamma(num_param_sims, shape = shape, scale = scale)
mu1Sims <- rnorm(n = num_param_sims, mean = xbar, sd = sqrt(ssSims/m))
mu2Sims <- rnorm(n = num_param_sims, mean = ybar, sd = sqrt(ssSims/n))
if(!relative){
cdf <- ecdf(mu1Sims - mu2Sims)
}else{
cdf <- ecdf((mu1Sims - mu2Sims)/mu2Sims)
}
# solve $F(c) - F(-c) = .95
upper <- uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )$root
if(plot & !relative){
hist(mu1Sims - mu2Sims)
abline(v=upper,col="red")
}else if(plot & relative){
hist((mu1Sims - mu2Sims)/mu2Sims)
abline(v=upper,col="red")
}
return(c(-upper, upper))
}
getCoolThing(x,y, .95, 1e4, TRUE, FALSE)
2*2^(-3)
1/4 + 1/2
knitr::opts_chunk$set(echo = TRUE)
head(data)
data <- cbind(actual = c(1,1,0,0,1,1,1), predicted = c(0,1,1,0,1,1,1))
head(data)
table(data)
head(data)
table(data)
table(data[,1],data[,2])
c(table(data[,1],data[,2]))
y <- c(table(data[,1],data[,2]))
table(data[,1],data[,2])
tbl <- table(data[,1],data[,2])
y <- c(tbl[1,], tbl[2,])
y
tbl
data <- data.frame(actual = c(1,1,0,0,1,1,1), predicted = c(0,1,1,0,1,1,1))
head(data)
tbl <- table(data[,1],data[,2])
tbl
?tbl
?table
data <- data.frame(actual = c(1,1,1,0,0,1,1,1), predicted = c(0,0,1,1,0,1,1,1))
head(data)
tbl <- table(data[,1],data[,2])
tbl
alphas <- c(1,1,1,1)
install.packages("dirmult")
?dirmult::rdiric
dirmult::rdirichlet
?dirmult::rdirichlet
dirmult::rdirichlet(1,  alphas + y)
dirmult::rdirichlet(2,  alphas + y)
numMonteCarlo <- 1000
samps <- dirmult::rdirichlet(numMonteCarlo,  alphas + y)
head(samps)
f1 <- function(lengthFourThetaSamp){ # take original formula and divide num/denom by somthing
tpRate <- lengthFourThetaSamp[4]
fpRate <- lengthFourThetaSamp[2]
fnRate <- lengthFourThetaSamp[3]
tpRate/(tpRate + .5*(fpRate+fnRate))
}
apply(samps, 1, f1)
f1Samps <- apply(samps, 1, f1)
quantile(f1Samps)
quantile(f1Samps, c(.025, .975))
library(quantmod)
getSymbols("VIX")
plot.ts(VIX)
plot(VIX)
tail(VIX)
getSymbols("^VIX")
tail(VIX)
plot(VIX)
plot(log(VIX))
head(log(VIX))
plot(log(Ad(VIX)))
x <- log(Ad(VIX))
head(x)
acf(x)
plot(diff(x))
x <- diff(log(Ad(VIX)))
acf(x)
x <- diff(log(Ad(VIX)))
head(x)
x <- diff(log(Ad(VIX)))[-1]
acf(x)
plot(diff(x))
plot(x)
summary(x)
plot(x)
tail(x)
head(VIX)
plot.ts(x)
hist(x)
summary(x)
acf(x)
acf(x, lag.max = 3)
pacf(x, lag.max = 3)
?arma
?arima
mod <- arima(x, order = c(1,0,1), include.mean = F, method = "MLE")
mod <- arima(x, order = c(1,0,1), include.mean = F, method = "ML")
summary(mod)
mod
predict(mod,1)
library(quantmod)
getSymbols("^VIX")
plot(VIX)
plot(log(Ad(VIX)))
x <- diff(log(Ad(VIX)))[-1]
acf(x, lag.max = 3)
getSymbols("^VIX")
plot(VIX)
plot(log(Ad(VIX)))
x <- diff(log(Ad(VIX)))[-1]
acf(x, lag.max = 3)
pacf(x, lag.max = 3)
summary(x)
plot.ts(x)
hist(x)
mod <- arima(x, order = c(1,0,1), include.mean = F, method = "ML")
predict(mod,1)
?auto.arima
library(forecast)
install.packages("auto.arima")
install.packages("forecast")
tinytex::parse_install(
text = "! LaTeX Error: File `sectsty.sty' not found."
)
tinytex::parse_packages("~/cv/cv.log")
setwd("~/option_trading/scripts/")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
source("~/option_trading/scripts/run_cpp.R")
runApp()
# window spot returns and write out a csv file
SPY <- getSymbols("SPY", auto.assign = FALSE, from="2015-01-01",to=Sys.Date())
tail(SPY)
prev.days <- seq(Sys.Date()-6,Sys.Date()-1,by='day')
prev.days
goodDays <- prev.days[(weekdays(prev.days) != 'Sunday') & (weekdays(prev.days) != 'Saturday')]
goodDays
lastTradingDay <- goodDays[length(goodDays)]
lastTradingDay
setwd("~/jsm22_pp/")
read.csv.zoo("data/SPY.csv")
library(xts)
read.csv.zoo("data/SPY.csv")
SPY <- read.csv.zoo("data/SPY.csv")
Ad(SPY)
head(SPY)
SPY$SPY.Adjusted
coredata(SPY$SPY.Adjusted)
diff(log(coredata(SPY$SPY.Adjusted)))
diff(log(coredata(SPY$SPY.Adjusted)))*100
returns <- diff(log(coredata(SPY$SPY.Adjusted)))*100
head(returns)
write.table(returns, file = "data/SPY_returns.csv", quote = F, col.names = F, row.names = F)
