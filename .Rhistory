monthlyRate <- uniroot(objectiveFunc, c(0.001/12,.1/12))
(1+monthlyRate)^12 -1
}
getInterest(420000, 2000, 30)
getInterest <- function(totalBorrowed, monthlyPayment, numYears){
numMonths <- numYears*12
objectiveFunc <- function(x){
(totalBorrowed*x*((1+x)^numMonths))/((1+x)^numMonths-1)-monthlyPayment
}
plot(seq(0,.1/12, .001), objectiveFunc(seq(0,.1/12, .001)), type = "l")
# derivObjective <- function(x){
#   denom <- (1+x)^numMonths - 1
#   first <- numMonths*totalBorrowed*x*(1+x)^(numMonths-1)/denom
#   second <- totalBorrowed*(1+x)^numMonths/denom
#   third <- numMonths*totalBorrowed*x*(1+x)^(2*numMonths-1)/(denom^2)
#   first +second - third
# }
#optim(.02, objectiveFunc, gr=derivObjective, method="BFGS")
monthlyRate <- uniroot(objectiveFunc, c(0.001/12,.1/12))$root
(1+monthlyRate)^12 -1
}
getInterest(420000, 2000, 30)
getInterest <- function(totalBorrowed, monthlyPayment, numYears){
numMonths <- numYears*12
objectiveFunc <- function(x){
(totalBorrowed*x*((1+x)^numMonths))/((1+x)^numMonths-1)-monthlyPayment
}
monthlyRate <- uniroot(objectiveFunc, c(0.001/12,.1/12))$root
(1+monthlyRate)^12 -1
#plot(seq(0,.1/12, .001), objectiveFunc(seq(0,.1/12, .001)), type = "l")
}
getInterest(420000, 2000, 30)
getInterest(410235.03, 1942.15, 30)
getEquityCurve <- function(principal, i, numYears=30){
monthlyPayment <- calcMonthlyPayment(principal,i,numYears)
r <- i/12
numPeriods <- numYears*12
pjs <- sapply(1:numPeriods, function(j){
(monthlyPayment-r*principal)*(1+r)^(j-1)
})
ijs <- monthlyPayment - pjs
cbind(pjs, ijs)
}
getEquityCurve(360000, .03125)
calcMonthlyPayment <- function(principal, i, numYears=30){
numPeriods <- numYears*12
r <- i/12
principal * r * (1+r)^numPeriods / ((1+r)^numPeriods-1)
}
calcMonthlyPayment(360000, .03125)
getEquityCurve <- function(principal, i, numYears=30){
monthlyPayment <- calcMonthlyPayment(principal,i,numYears)
r <- i/12
numPeriods <- numYears*12
pjs <- sapply(1:numPeriods, function(j){
(monthlyPayment-r*principal)*(1+r)^(j-1)
})
ijs <- monthlyPayment - pjs
cbind(pjs, ijs)
}
getEquityCurve(360000, .03125)
plot.ts(cumsum(getEquityCurve(360000, .03125)$pjs))
getEquityCurve(360000, .03125)$pjs
getEquityCurve(360000, .03125)[$pjs],1
getEquityCurve(360000, .03125)[,1]
plot.ts(cumsum(getEquityCurve(360000, .03125)[,1]))
plot.ts(cumsum(getEquityCurve(410235.03, .04)[,1]))
plot.ts(cumsum(getEquityCurve(410235.03, .04)[,1]), main = "equity ($)", xlab = "month")
plot.ts(cumsum(getEquityCurve(410235.03, .04)[,1]), ylab = "equity ($)", xlab = "month")
plot.ts(cumsum(getEquityCurve(410235.03, .04)[,2]), ylab = "equity ($)", xlab = "month")
plot.ts(cumsum(getEquityCurve(410235.03, .04)[,2]), ylab = "interest paid ($)", xlab = "month")
for i in 1:3 print(i)
zeros(3)
?min
cappedMoveAve <- function(dataVector){
n <- length(dataVector)
y <- rep(0,n)
for(i in 3:n){
thisAve <- (dataVector[i] + dataVector[i-1] + dataVector[i-2])/3
y[t] <- min(c(10,thisAve))
}
y
}
cappedMoveAve(cumsum(rnorm(10)))
cappedMoveAve <- function(dataVector){
n <- length(dataVector)
y <- rep(0,n)
for(t in 3:n){
thisAve <- (dataVector[t] + dataVector[t-1] + dataVector[t-2])/3
y[t] <- min(c(10,thisAve))
}
y
}
cappedMoveAve(cumsum(rnorm(10)))
cappedMoveAve(cumsum(rnorm(100)))
cappedMoveAve(cumsum(10*rnorm(100)))
body(cappedMoveAve)
"for" %in% body(cappedMoveAve)
grepl("for", body(cappedMoveAve))
any(grepl("for", body(cappedMoveAve)))
cappedMoveAve(cumsum(10*rnorm(100))) <= 10
all(cappedMoveAve(cumsum(10*rnorm(100))) <= 10)
cappedMoveAve(seq(-100,9))
cappedMoveAve(seq(-100,9))[-(1:2)]
cappedMoveAve(seq(-100,9))[-(1:2)] == seq(-100,9)[-(1:2)]
seq(-100,9)
all(cappedMoveAve(cumsum(10*rnorm(100))) == instructorCappedMoveAve(cumsum(10*rnorm(100))))
# tests
instructorCappedMoveAve <- function(dataVector){
n <- length(dataVector)
y <- rep(0,n)
for(t in 3:n){
thisAve <- (dataVector[t] + dataVector[t-1] + dataVector[t-2])/3
y[t] <- min(c(10,thisAve))
}
y
}
all(cappedMoveAve(cumsum(10*rnorm(100))) == instructorCappedMoveAve(cumsum(10*rnorm(100))))
all(cappedMoveAve(stuff) == instructorCappedMoveAve(stuff))
stuff <- cumsum(10*rnorm(100))
all(cappedMoveAve(stuff) == instructorCappedMoveAve(stuff))
all(cappedMoveAve(-100:100) == instructorCappedMoveAve(-100:100))
knitr::opts_chunk$set(echo = TRUE)
moneyDown <- 360000-324000
moneyDown
numYears <- 10
homePrice <- 360000
loanAmount <- 342000
moneyDown <- homePrice-loanAmount
monthlyPayment <- 1893.26
getInterest <- function(totalBorrowed, monthlyPayment, numYears){
numMonths <- numYears*12
objectiveFunc <- function(x){
(totalBorrowed*x*((1+x)^numMonths))/((1+x)^numMonths-1)-monthlyPayment
}
monthlyRate <- uniroot(objectiveFunc, c(0.001/12,.1/12))$root
(1+monthlyRate)^12 -1
#plot(seq(0,.1/12, .001), objectiveFunc(seq(0,.1/12, .001)), type = "l")
}
getInterest(loanAmount, monthlyPayment, 30)
numYears <- 10
homePrice <- 360000
loanAmount <- 324000
moneyDown <- homePrice-loanAmount
monthlyPayment <- 1792.87
getInterest <- function(totalBorrowed, monthlyPayment, numYears){
numMonths <- numYears*12
objectiveFunc <- function(x){
(totalBorrowed*x*((1+x)^numMonths))/((1+x)^numMonths-1)-monthlyPayment
}
monthlyRate <- uniroot(objectiveFunc, c(0.001/12,.1/12))$root
(1+monthlyRate)^12 -1
#plot(seq(0,.1/12, .001), objectiveFunc(seq(0,.1/12, .001)), type = "l")
}
mortgageRate <- getInterest(loanAmount, monthlyPayment, 30)/12
numTimeSteps <- 12*numYears
propertyTaxRate <- .0095/12
insurance <- 0
mortgageRate
mortgageRate*12
numYears <- 10
homePrice <- 360000
loanAmount <- 342000
moneyDown <- homePrice-loanAmount
1e5
sims[nrow(sims),]
sims[nrow(sims),]
sims[nrow(sims)]
sims
numYears <- 10
homePrice <- 360000
loanAmount <- 342000
moneyDown <- homePrice-loanAmount
monthlyPayment <- 1893.26
getInterest <- function(totalBorrowed, monthlyPayment, numYears){
numMonths <- numYears*12
objectiveFunc <- function(x){
(totalBorrowed*x*((1+x)^numMonths))/((1+x)^numMonths-1)-monthlyPayment
}
monthlyRate <- uniroot(objectiveFunc, c(0.001/12,.1/12))$root
(1+monthlyRate)^12 -1
#plot(seq(0,.1/12, .001), objectiveFunc(seq(0,.1/12, .001)), type = "l")
}
mortgageRate <- getInterest(loanAmount, monthlyPayment, 30)/12
numTimeSteps <- 12*numYears
propertyTaxRate <- .0095/12
insurance <- 0
P <- vector(mode = "numeric", length = numTimeSteps)
l <- vector(mode = "numeric", length = numTimeSteps)
t <- vector(mode = "numeric", length = numTimeSteps)
P[1] <- homePrice
l[1] <- P[1] - moneyDown
t[1] <- 10000 + moneyDown
simOnePath <- function(){
for(i in 2:numTimeSteps){
P[i] <- P[i-1] *(1 + rnorm(n = 1, mean = meanR, sd = sdR))
l[i] <- (l[i-1] - monthlyPayment)*(1 + mortgageRate)
t[i] <- t[i-1] + monthlyPayment + insurance + propertyTaxRate*P[i-1]
}
P - l - t
}
sims <- replicate(1000, simOnePath())
plot.ts(sims, plot.type="single", ylab = "profit", xlab="months into future")
d <- read.csv("~/stat-5430/homeworks/hw4/Zip_zhvi_uc_sfr_tier_0.33_0.67_sm_sa_month.csv")
d <- read.csv("~/stat-5430/homeworks/hw4/Zip_zhvi_uc_sfr_tier_0.33_0.67_sm_sa_month.csv")
d <- d[d$City == "Charlottesville" & d$State =="VA",]
roseHill <- d[d$RegionName==22903,]
prices <- t(roseHill[,grepl("X", colnames(roseHill))])
#plot.ts(prices)
arithReturns <- prices[-1]/prices[-nrow(prices)]-1
#plot.ts(arithReturns)
(meanR <- exp(mean(log(1+arithReturns)))-1)
(sdR <- sd(arithReturns))
numYears <- 10
homePrice <- 360000
loanAmount <- 342000
moneyDown <- homePrice-loanAmount
monthlyPayment <- 1893.26
getInterest <- function(totalBorrowed, monthlyPayment, numYears){
numMonths <- numYears*12
objectiveFunc <- function(x){
(totalBorrowed*x*((1+x)^numMonths))/((1+x)^numMonths-1)-monthlyPayment
}
monthlyRate <- uniroot(objectiveFunc, c(0.001/12,.1/12))$root
(1+monthlyRate)^12 -1
#plot(seq(0,.1/12, .001), objectiveFunc(seq(0,.1/12, .001)), type = "l")
}
mortgageRate <- getInterest(loanAmount, monthlyPayment, 30)/12
numTimeSteps <- 12*numYears
propertyTaxRate <- .0095/12
insurance <- 0
P <- vector(mode = "numeric", length = numTimeSteps)
l <- vector(mode = "numeric", length = numTimeSteps)
t <- vector(mode = "numeric", length = numTimeSteps)
P[1] <- homePrice
l[1] <- P[1] - moneyDown
t[1] <- 10000 + moneyDown
simOnePath <- function(){
for(i in 2:numTimeSteps){
P[i] <- P[i-1] *(1 + rnorm(n = 1, mean = meanR, sd = sdR))
l[i] <- (l[i-1] - monthlyPayment)*(1 + mortgageRate)
t[i] <- t[i-1] + monthlyPayment + insurance + propertyTaxRate*P[i-1]
}
P - l - t
}
sims <- replicate(1000, simOnePath())
sims <- replicate(1000, simOnePath())
plot.ts(sims, plot.type="single", ylab = "profit", xlab="months into future")
sims[nrow(sims),]
hist(sims[nrow(sims),])
numYears <- 5
homePrice <- 360000
loanAmount <- 342000
moneyDown <- homePrice-loanAmount
monthlyPayment <- 1893.26
getInterest <- function(totalBorrowed, monthlyPayment, numYears){
numMonths <- numYears*12
objectiveFunc <- function(x){
(totalBorrowed*x*((1+x)^numMonths))/((1+x)^numMonths-1)-monthlyPayment
}
monthlyRate <- uniroot(objectiveFunc, c(0.001/12,.1/12))$root
(1+monthlyRate)^12 -1
#plot(seq(0,.1/12, .001), objectiveFunc(seq(0,.1/12, .001)), type = "l")
}
mortgageRate <- getInterest(loanAmount, monthlyPayment, 30)/12
mortgageRate
mortgageRate*12
numYears <- 5
homePrice <- 360000
loanAmount <- 324000
moneyDown <- homePrice-loanAmount
monthlyPayment <- 1792.87
getInterest <- function(totalBorrowed, monthlyPayment, numYears){
numMonths <- numYears*12
objectiveFunc <- function(x){
(totalBorrowed*x*((1+x)^numMonths))/((1+x)^numMonths-1)-monthlyPayment
}
monthlyRate <- uniroot(objectiveFunc, c(0.001/12,.1/12))$root
(1+monthlyRate)^12 -1
#plot(seq(0,.1/12, .001), objectiveFunc(seq(0,.1/12, .001)), type = "l")
}
mortgageRate <- getInterest(loanAmount, monthlyPayment, 30)/12
mortgageRate
mortgageRate*12
mean(sims[nrow(sims),])
mean(sims[nrow(sims),])
numYears <- 5
homePrice <- 360000
loanAmount <- 342000
moneyDown <- homePrice-loanAmount
monthlyPayment <- 1893.26
getInterest <- function(totalBorrowed, monthlyPayment, numYears){
numMonths <- numYears*12
objectiveFunc <- function(x){
(totalBorrowed*x*((1+x)^numMonths))/((1+x)^numMonths-1)-monthlyPayment
}
monthlyRate <- uniroot(objectiveFunc, c(0.001/12,.1/12))$root
(1+monthlyRate)^12 -1
#plot(seq(0,.1/12, .001), objectiveFunc(seq(0,.1/12, .001)), type = "l")
}
mortgageRate <- getInterest(loanAmount, monthlyPayment, 30)/12
numTimeSteps <- 12*numYears
propertyTaxRate <- .0095/12
insurance <- 0
P <- vector(mode = "numeric", length = numTimeSteps)
l <- vector(mode = "numeric", length = numTimeSteps)
t <- vector(mode = "numeric", length = numTimeSteps)
P[1] <- homePrice
l[1] <- P[1] - moneyDown
t[1] <- 10000 + moneyDown
simOnePath <- function(){
for(i in 2:numTimeSteps){
P[i] <- P[i-1] *(1 + rnorm(n = 1, mean = meanR, sd = sdR))
l[i] <- (l[i-1] - monthlyPayment)*(1 + mortgageRate)
t[i] <- t[i-1] + monthlyPayment + insurance + propertyTaxRate*P[i-1]
}
P - l - t
}
sims <- replicate(1000, simOnePath())
plot.ts(sims, plot.type="single", ylab = "profit", xlab="months into future")
plot.ts(sims, plot.type="single", ylab = "profit", xlab="months into future")
hist(sims[nrow(sims),])
mean(sims[nrow(sims),])
getInterest <- function(totalBorrowed, monthlyPayment, numYears){
numMonths <- numYears*12
objectiveFunc <- function(x){
(totalBorrowed*x*((1+x)^numMonths))/((1+x)^numMonths-1)-monthlyPayment
}
monthlyRate <- uniroot(objectiveFunc, c(0.001/12,.1/12))$root
monthlyRate
#plot(seq(0,.1/12, .001), objectiveFunc(seq(0,.1/12, .001)), type = "l")
}
mortgageRate <- getInterest(loanAmount, monthlyPayment, 30)
mortgageRate
mortgageRate*12
arithReturns
sample(arithReturns, 1)
hist(sims[nrow(sims),], xlab = "profit (\\$)")
hist(sims[nrow(sims),], xlab = "profit (\$)")
setwd("~/jsm22_pp/")
source("~/jsm22_pp/R/create_configs.R")
source("~/jsm22_pp/R/create_configs.R")
source("~/jsm22_pp/R/run_conditional_likes.R")
cNames <- c("lw_aux_prior", "lw_aux_csv", "lw2_prior","lw2_csv", "swarm_prior", "swarm_csv", "pf_est")
paste0(cNames, ".txt")
outFiles <- paste0(cNames, ".txt")
outFiles <- paste("data/cond_likes/",outFiles, sep ="")
allOutput <- lapply(outFiles, read.csv, header=F)
# /**
#   * RUN MODES
# * 2. Run the Liu-West1 (original auxiliary style) filter for conditional likelihoods (sampling parameters from prior)
# * 5. Run the Liu-West1 (original auxiliary style) filter for conditional likelihoods (sampling parameters from csv)
# * 8. Run the Liu-West2 filter for conditional likelihoods (sampling parameters from prior)
# * 11. Run the Liu-West2 filter for conditional likelihoods (sampling parameters from csv)
# * 14. Run the Particle Swarm (bootstrap filters) algorithm for conditional likelihoods (sampling parameters from prior)
# * 17. Run the Particle Swarm (bootstrap filters) algorithm for conditional likelihoods (sampling parameters from csv)
# * 20. Run standard auxiliary particle filter for conditional likelihoods (with given parameter estimates).
# */
library(ggplot2)
library(reshape2)
allOutput <- as.data.frame(lapply(outFiles, read.csv, header=F))
colnames(allOutput) <- cNames
paste0(cNames, ".txt")
head(allOutput)
seq_along(allOutput[,1])
allOutput$time <- seq_along(allOutput[,1])
melt(allOutput, id.vars = time)
outFiles <- paste0(cNames, ".txt")
outFiles <- paste("data/cond_likes/",outFiles, sep ="")
allOutput <- as.data.frame(lapply(outFiles, read.csv, header=F))
colnames(allOutput) <- cNames
allOutput$time <- seq_along(allOutput[,1])
melt(allOutput, id.vars = time)
melt(allOutput, id.vars = "time")
mdf <- melt(allOutput, id.vars = "time")
head(mdf)
ggplot(mdf,                            # Draw ggplot2 time series plot
aes(x = year,
y = value,
col = variable)) +
geom_line()
mdf <- melt(allOutput, id.vars = "time")
ggplot(mdf,                            # Draw ggplot2 time series plot
aes(x = time,
y = value,
col = variable)) +
geom_line()
# /**
#   * RUN MODES
# * 2. Run the Liu-West1 (original auxiliary style) filter for conditional likelihoods (sampling parameters from prior)
# * 5. Run the Liu-West1 (original auxiliary style) filter for conditional likelihoods (sampling parameters from csv)
# * 8. Run the Liu-West2 filter for conditional likelihoods (sampling parameters from prior)
# * 11. Run the Liu-West2 filter for conditional likelihoods (sampling parameters from csv)
# * 14. Run the Particle Swarm (bootstrap filters) algorithm for conditional likelihoods (sampling parameters from prior)
# * 17. Run the Particle Swarm (bootstrap filters) algorithm for conditional likelihoods (sampling parameters from csv)
# * 20. Run standard auxiliary particle filter for conditional likelihoods (with given parameter estimates).
# */
library(ggplot2)
library(reshape2)
# have to change directory because some filepaths are hardcoded relative style
setwd("~/jsm22_pp/")
cNames <- c("lw_aux_prior", "lw_aux_csv", "lw2_prior","lw2_csv", "swarm_prior", "swarm_csv", "pf_est")
outFiles <- paste0(cNames, ".txt")
outFiles <- paste("data/cond_likes/",outFiles, sep ="")
allOutput <- as.data.frame(lapply(outFiles, read.csv, header=F))
colnames(allOutput) <- cNames
allOutput$time <- seq_along(allOutput[,1])
allOutput <- allOutput[1:10,]
mdf <- melt(allOutput, id.vars = "time")
ggplot(mdf,                            # Draw ggplot2 time series plot
aes(x = time,
y = value,
col = variable)) +
geom_line()
# /**
#   * RUN MODES
# * 2. Run the Liu-West1 (original auxiliary style) filter for conditional likelihoods (sampling parameters from prior)
# * 5. Run the Liu-West1 (original auxiliary style) filter for conditional likelihoods (sampling parameters from csv)
# * 8. Run the Liu-West2 filter for conditional likelihoods (sampling parameters from prior)
# * 11. Run the Liu-West2 filter for conditional likelihoods (sampling parameters from csv)
# * 14. Run the Particle Swarm (bootstrap filters) algorithm for conditional likelihoods (sampling parameters from prior)
# * 17. Run the Particle Swarm (bootstrap filters) algorithm for conditional likelihoods (sampling parameters from csv)
# * 20. Run standard auxiliary particle filter for conditional likelihoods (with given parameter estimates).
# */
library(ggplot2)
library(reshape2)
# have to change directory because some filepaths are hardcoded relative style
setwd("~/jsm22_pp/")
cNames <- c("lw_aux_prior", "lw_aux_csv", "lw2_prior","lw2_csv", "swarm_prior", "swarm_csv", "pf_est")
outFiles <- paste0(cNames, ".txt")
outFiles <- paste("data/cond_likes/",outFiles, sep ="")
allOutput <- as.data.frame(lapply(outFiles, read.csv, header=F))
colnames(allOutput) <- cNames
allOutput$time <- seq_along(allOutput[,1])
allOutput <- allOutput[1:50,]
mdf <- melt(allOutput, id.vars = "time")
ggplot(mdf,                            # Draw ggplot2 time series plot
aes(x = time,
y = value,
col = variable)) +
geom_line()
# /**
#   * RUN MODES
# * 2. Run the Liu-West1 (original auxiliary style) filter for conditional likelihoods (sampling parameters from prior)
# * 5. Run the Liu-West1 (original auxiliary style) filter for conditional likelihoods (sampling parameters from csv)
# * 8. Run the Liu-West2 filter for conditional likelihoods (sampling parameters from prior)
# * 11. Run the Liu-West2 filter for conditional likelihoods (sampling parameters from csv)
# * 14. Run the Particle Swarm (bootstrap filters) algorithm for conditional likelihoods (sampling parameters from prior)
# * 17. Run the Particle Swarm (bootstrap filters) algorithm for conditional likelihoods (sampling parameters from csv)
# * 20. Run standard auxiliary particle filter for conditional likelihoods (with given parameter estimates).
# */
library(ggplot2)
library(reshape2)
# have to change directory because some filepaths are hardcoded relative style
setwd("~/jsm22_pp/")
cNames <- c("lw_aux_prior", "lw_aux_csv", "lw2_prior","lw2_csv", "swarm_prior", "swarm_csv", "pf_est")
outFiles <- paste0(cNames, ".txt")
outFiles <- paste("data/cond_likes/",outFiles, sep ="")
allOutput <- as.data.frame(lapply(outFiles, read.csv, header=F))
colnames(allOutput) <- cNames
allOutput$time <- seq_along(allOutput[,1])
allOutput <- allOutput[51:100,]
mdf <- melt(allOutput, id.vars = "time")
ggplot(mdf,                            # Draw ggplot2 time series plot
aes(x = time,
y = value,
col = variable)) +
geom_line()
head(allOutput)
subset(allOutput, select = c("swarm_prior","swarm_csv"))
plot(subset(allOutput, select = c("swarm_prior","swarm_csv")))
cor(subset(allOutput, select = c("swarm_prior","swarm_csv")))
idx <- 5
cmd <- paste(prog, runModes[idx], dataPath, '>', outFiles[idx])
cat(idx, ": ", cmd, "\n")
setwd("~/jsm22_pp/")
source("R/create_configs.R")
setwd("~/jsm22_pp/")
prog <- "./cpp/cmake-build-release/jsmpp_v2"
runModes <- c(2,5,8,11,14,17,20) # see above
dataPath <- "./data/SPY_returns.csv"
outFiles <- c("lw_aux_prior.txt", "lw_aux_csv.txt", "lw2_prior.txt",
"lw2_csv.txt", "swarm_prior.txt", "swarm_csv.txt", "pf_est.txt")
outFiles <- paste("data/cond_likes/",outFiles, sep ="")
idx <- 5
cmd <- paste(prog, runModes[idx], dataPath, '>', outFiles[idx])
cat(idx, ": ", cmd, "\n")
source("~/jsm22_pp/R/run_conditional_likes.R")
source("~/jsm22_pp/R/run_conditional_likes.R")
source("~/jsm22_pp/R/vis_conditional_likes.R")
# * 11. Run the Liu-West2 filter for conditional likelihoods (sampling parameters from csv)
# * 14. Run the Particle Swarm (bootstrap filters) algorithm for conditional likelihoods (sampling parameters from prior)
# * 17. Run the Particle Swarm (bootstrap filters) algorithm for conditional likelihoods (sampling parameters from csv)
# * 20. Run standard auxiliary particle filter for conditional likelihoods (with given parameter estimates).
# */
library(ggplot2)
library(reshape2)
# have to change directory because some filepaths are hardcoded relative style
setwd("~/jsm22_pp/")
cNames <- c("lw_aux_prior", "lw_aux_csv", "lw2_prior","lw2_csv", "swarm_prior", "swarm_csv", "pf_est")
outFiles <- paste0(cNames, ".txt")
outFiles <- paste("data/cond_likes/",outFiles, sep ="")
allOutput <- as.data.frame(lapply(outFiles, read.csv, header=F))
colnames(allOutput) <- cNames
allOutput$time <- seq_along(allOutput[,1])
allOutput <- allOutput[51:100,]
mdf <- melt(allOutput, id.vars = "time")
ggplot(mdf,                            # Draw ggplot2 time series plot
aes(x = time,
y = value,
col = variable)) +
geom_line()
