rnorm(n = 2, sd = c(.001, 10))
rnorm(n = 2, sd = c(.001, 10))
rnorm(n = 2, sd = c(.001, 10))
rnorm(n = 2, sd = c(.001, 10))
num_param_sims <- 1e4
xbar <- mean(x)
ybar <- mean(y)
m <- length(x)
n <- length(y)
shape <- .5*(m + n - 2)
scale <- sum(x^2) + sum(y^2) + m*(xbar^2) + n*(ybar^2)
ssSims <- 1/rgamma(num_param_sims, shape = shape, scale = scale)
mu1Sims <- rnorm(n = num_param_sims, mean = xbar, sd = sqrt(ssSims/m))
mu2Sims <- rnorm(n = num_param_sims, mean = ybar, sd = sqrt(ssSims/n))
hist(mu1Sims - mu2Sims)
?ecdf
ecdf(mu1Sims - mu2Sims)
g <- ecdf(mu1Sims - mu2Sims)
g(2)
hist(mu1Sims - mu2Sims)
g(.7)
g(.8)
?uniroot
c(abs(x),abs(y)
)
max(c(abs(x),abs(y)))
# solve $F(c) - F(-c) = .95
uniroot(function(x){ cdf(x) - cdf(-x) - confidence}, 0, max(c(abs(x),abs(y))) )
# solve $F(c) - F(-c) = .95
uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )
cdf <- ecdf(mu1Sims - mu2Sims)
# solve $F(c) - F(-c) = .95
uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )
confidence <- .95
cdf <- ecdf(mu1Sims - mu2Sims)
# solve $F(c) - F(-c) = .95
uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )
# solve $F(c) - F(-c) = .95
uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )$root
# solve $F(c) - F(-c) = .95
c <- uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )$root
# solve $F(c) - F(-c) = .95
c <- uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )$root
hist(mu1Sims - mu2Sims)
abline(v=c, col="red")
abline(v=-c, col="red")
hist(mu1Sims - mu2Sims)
abline(v=c, col="red")
c
knitr::opts_chunk$set(echo = TRUE)
hist(mu1Sims - mu2Sims) + abline(v=c, col="red")
mu1Sims
mu2Sims
mu1Sims - mu2Sims
hist(mu1Sims - mu2Sims)# + abline(v=c, col="red")
num_param_sims <- 1e4
confidence <- .95
xbar <- mean(x)
ybar <- mean(y)
m <- length(x)
n <- length(y)
shape <- .5*(m + n - 2)
scale <- sum(x^2) + sum(y^2) + m*(xbar^2) + n*(ybar^2)
ssSims <- 1/rgamma(num_param_sims, shape = shape, scale = scale)
mu1Sims <- rnorm(n = num_param_sims, mean = xbar, sd = sqrt(ssSims/m))
mu2Sims <- rnorm(n = num_param_sims, mean = ybar, sd = sqrt(ssSims/n))
cdf <- ecdf(mu1Sims - mu2Sims)
# solve $F(c) - F(-c) = .95
upper <- uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )$root
hist(mu1Sims - mu2Sims)
abline(v=upper,col="red")
# num_param_sims <- 1e4
# confidence <- .95
getCoolThing <- function(x, y, confidence, num_param_sims, plot=FALSE, relative = FALSE){
xbar <- mean(x)
ybar <- mean(y)
m <- length(x)
n <- length(y)
shape <- .5*(m + n - 2)
scale <- sum(x^2) + sum(y^2) + m*(xbar^2) + n*(ybar^2)
ssSims <- 1/rgamma(num_param_sims, shape = shape, scale = scale)
mu1Sims <- rnorm(n = num_param_sims, mean = xbar, sd = sqrt(ssSims/m))
mu2Sims <- rnorm(n = num_param_sims, mean = ybar, sd = sqrt(ssSims/n))
if(!relative){
cdf <- ecdf(mu1Sims - mu2Sims)
}else{
cdf <- ecdf((mu1Sims - mu2Sims)/mu2Sims)
}
# solve $F(c) - F(-c) = .95
upper <- uniroot(function(x){ cdf(x) - cdf(-x) - confidence},
lower = 0,
upper = max(c(abs(x),abs(y))) )$root
if(plot & !relative){
hist(mu1Sims - mu2Sims)
abline(v=upper,col="red")
}else if(plot & relative){
hist((mu1Sims - mu2Sims)/mu2Sims)
abline(v=upper,col="red")
}
return(c(-upper, upper))
}
getCoolThing(x,y, .95, 1e4, TRUE, FALSE)
2*2^(-3)
1/4 + 1/2
knitr::opts_chunk$set(echo = TRUE)
head(data)
data <- cbind(actual = c(1,1,0,0,1,1,1), predicted = c(0,1,1,0,1,1,1))
head(data)
table(data)
head(data)
table(data)
table(data[,1],data[,2])
c(table(data[,1],data[,2]))
y <- c(table(data[,1],data[,2]))
table(data[,1],data[,2])
tbl <- table(data[,1],data[,2])
y <- c(tbl[1,], tbl[2,])
y
tbl
data <- data.frame(actual = c(1,1,0,0,1,1,1), predicted = c(0,1,1,0,1,1,1))
head(data)
tbl <- table(data[,1],data[,2])
tbl
?tbl
?table
data <- data.frame(actual = c(1,1,1,0,0,1,1,1), predicted = c(0,0,1,1,0,1,1,1))
head(data)
tbl <- table(data[,1],data[,2])
tbl
alphas <- c(1,1,1,1)
install.packages("dirmult")
?dirmult::rdiric
dirmult::rdirichlet
?dirmult::rdirichlet
dirmult::rdirichlet(1,  alphas + y)
dirmult::rdirichlet(2,  alphas + y)
numMonteCarlo <- 1000
samps <- dirmult::rdirichlet(numMonteCarlo,  alphas + y)
head(samps)
f1 <- function(lengthFourThetaSamp){ # take original formula and divide num/denom by somthing
tpRate <- lengthFourThetaSamp[4]
fpRate <- lengthFourThetaSamp[2]
fnRate <- lengthFourThetaSamp[3]
tpRate/(tpRate + .5*(fpRate+fnRate))
}
apply(samps, 1, f1)
f1Samps <- apply(samps, 1, f1)
quantile(f1Samps)
quantile(f1Samps, c(.025, .975))
library(quantmod)
getSymbols("VIX")
plot.ts(VIX)
plot(VIX)
tail(VIX)
getSymbols("^VIX")
tail(VIX)
plot(VIX)
plot(log(VIX))
head(log(VIX))
plot(log(Ad(VIX)))
x <- log(Ad(VIX))
head(x)
acf(x)
plot(diff(x))
x <- diff(log(Ad(VIX)))
acf(x)
x <- diff(log(Ad(VIX)))
head(x)
x <- diff(log(Ad(VIX)))[-1]
acf(x)
plot(diff(x))
plot(x)
summary(x)
plot(x)
tail(x)
head(VIX)
plot.ts(x)
hist(x)
summary(x)
acf(x)
acf(x, lag.max = 3)
pacf(x, lag.max = 3)
?arma
?arima
mod <- arima(x, order = c(1,0,1), include.mean = F, method = "MLE")
mod <- arima(x, order = c(1,0,1), include.mean = F, method = "ML")
summary(mod)
mod
predict(mod,1)
library(quantmod)
getSymbols("^VIX")
plot(VIX)
plot(log(Ad(VIX)))
x <- diff(log(Ad(VIX)))[-1]
acf(x, lag.max = 3)
getSymbols("^VIX")
plot(VIX)
plot(log(Ad(VIX)))
x <- diff(log(Ad(VIX)))[-1]
acf(x, lag.max = 3)
pacf(x, lag.max = 3)
summary(x)
plot.ts(x)
hist(x)
mod <- arima(x, order = c(1,0,1), include.mean = F, method = "ML")
predict(mod,1)
?auto.arima
library(forecast)
install.packages("auto.arima")
install.packages("forecast")
tinytex::parse_install(
text = "! LaTeX Error: File `sectsty.sty' not found."
)
tinytex::parse_packages("~/cv/cv.log")
setwd("~/option_trading/scripts/")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
source("~/option_trading/scripts/run_cpp.R")
runApp()
# window spot returns and write out a csv file
SPY <- getSymbols("SPY", auto.assign = FALSE, from="2015-01-01",to=Sys.Date())
tail(SPY)
prev.days <- seq(Sys.Date()-6,Sys.Date()-1,by='day')
prev.days
goodDays <- prev.days[(weekdays(prev.days) != 'Sunday') & (weekdays(prev.days) != 'Saturday')]
goodDays
lastTradingDay <- goodDays[length(goodDays)]
lastTradingDay
arima.sim(model = list(ar=.9))
arima.sim(model = list(ar=.9), n = 100)
y <- arima.sim(model = list(ar=.9), n = 100)
acf(y)
pacf(y)
y <- arima.sim(model = list(ar=1,.9), n = 100)
pacf(y)
y <- arima.sim(model = list(ar=c(1,.9)), n = 100)
pacf(y)
y <- arima.sim(model = list(ar=.9), n = 100)
pacf(y)
?arima.sim
y <- arima.sim(model = list(ar=.9), n = 100)
pacf(y)
aacf(y)
acf(y, type = "partial")
acf(y)#, type = "partial")
acf(y, type = "partial")
y <- arima.sim(model = list(ar=.9), n = 1000)
acf(y, type = "partial")
y <- arima.sim(model = list(ar=.9), n = 100)
acf(y, type = "partial")
plot.ts(y)
y <- arima.sim(model = list(ar=.9), n = 100)
lag.y <- y[-100]
y <- y[-1]
lm(y ~ lag.y)
summary(lm(y ~ lag.y))
summary(lm(y ~ lag.y + 0))
y <- arima.sim(model = list(ar=.9), n = 100)
lag.y <- y[-100]
summary(lm(y[-1] ~ lag.y + 0))
?arima
arima(y, order = c(1,0,0), method = c("CSS"))
summary(arima(y, order = c(1,0,0), method = c("CSS")))
arima(y, order = c(1,0,0), method = c("CSS"))
arima(y, order = c(1,0,0), method = c("CSS"), include.mean = F)
summary(lm(y[-1] ~ lag.y + 0))
y <- arima.sim(model = list(ar=.9), n = 100)
lag.y <- y[-100]
summary(lm(y[-1] ~ lag.y + 0))
arima(y, order = c(1,0,0), method = c("CSS"), include.mean = F)
?SYSTEM
?system
prog <- "./cpp/cmake-build-release/jsmpp_v2"
runMode <- 2
dataPath <- "data/SPY_returns.csv"
paste(c(prog, runMode, dataPath))
prog <- "./cpp/cmake-build-release/jsmpp_v2"
runMode <- 2
dataPath <- "data/SPY_returns.csv"
paste(c(prog, runMode, dataPath))
paste(prog, runMode, dataPath)
paste(prog, runMode, dataPath)
tmpOutFile <- "~/Desktop/tmp.csv"
paste(prog, runMode, dataPath, ">", tmpOutFile)
cmd
cmd <- paste(prog, runMode, dataPath, ">", tmpOutFile)
system(cmd)
prog <- "~/jsm22_pp/cpp/cmake-build-release/jsmpp_v2"
runMode <- 2
dataPath <- "~/jsm22_pp/data/SPY_returns.csv"
tmpOutFile <- "~/Desktop/tmp.csv"
cmd <- paste(prog, runMode, dataPath, ">", tmpOutFile)
system(cmd)
cmd
cmd <- paste(prog, runMode, ,'"', dataPath, '" >', tmpOutFile)
cmd <- paste(prog, runMode, '"', dataPath, '" >', tmpOutFile)
cmd
cmd <- paste(prog, runMode, '\"', dataPath, '" >', tmpOutFile)
cmd
dataPath <- '"~/jsm22_pp/data/SPY_returns.csv"'
tmpOutFile <- '"~/Desktop/tmp.csv"'
cmd <- paste(prog, runMode, dataPath, tmpOutFile)
cmd
dataPath <- '"~/jsm22_pp/data/SPY_returns.csv"'
dataPath
dataPath <- '\"~/jsm22_pp/data/SPY_returns.csv\"'
dataPath
dataPath <- "\"~/jsm22_pp/data/SPY_returns.csv\""
dataPath
?shQuote
dataPath <- shQuote("~/jsm22_pp/data/SPY_returns.csv")
dataPath
prog <- "~/jsm22_pp/cpp/cmake-build-release/jsmpp_v2"
runMode <- 2
dataPath <- "\"~/jsm22_pp/data/SPY_returns.csv\""
tmpOutFile <- "\"~/Desktop/tmp.csv\""
cmd <- paste(prog, runMode, dataPath, tmpOutFile)
system(cmd)
cmd
prog <- "~/jsm22_pp/cpp/cmake-build-release/jsmpp_v2"
runMode <- 2
dataPath <- '~/jsm22_pp/data/SPY_returns.csv"'
tmpOutFile <- '"~/Desktop/tmp.csv"'
cmd <- paste(prog, runMode, dataPath, tmpOutFile)
cmd
prog <- "~/jsm22_pp/cpp/cmake-build-release/jsmpp_v2"
runMode <- 2
dataPath <- '"~/jsm22_pp/data/SPY_returns.csv"'
tmpOutFile <- '"~/Desktop/tmp.csv"'
cmd <- paste(prog, runMode, dataPath, tmpOutFile)
cmd
system(cmd)
prog <- "~/jsm22_pp/cpp/cmake-build-release/jsmpp_v2"
runMode <- 2
dataPath <- '~/jsm22_pp/data/SPY_returns.csv'
tmpOutFile <- '~/Desktop/tmp.csv'
cmd <- paste0(prog, " ", runMode, '' "', dataPath, '" "', tmpOutFile, '"')
cmd
system(cmd)
cmd <- paste0(prog, " ", runMode)#, '' "', dataPath, '" "', tmpOutFile, '"')
cmd
cmd <- paste0(prog, " ", runMode, ' "')#, dataPath, '" "', tmpOutFile, '"')
cmd
cmd <- paste0(prog, " ", runMode, ' "', dataPath, '" "', tmpOutFile, '"')
cmd
system(cmd)
prog <- "~/jsm22_pp/cpp/cmake-build-release/jsmpp_v2"
runMode <- 2
dataPath <- '~/jsm22_pp/data/SPY_returns.csv'
tmpOutFile <- '~/Desktop/tmp.csv'
cmd <- paste(prog, runMode, dataPath, '>', tmpOutFile)
#./cpp/cmake-build-release/jsmpp_v2 1 "data/SPY_returns.csv" > ~/Desktop/tmp.csv
cmd
system(cmd)
prog <- "~/jsm22_pp/cpp/cmake-build-release/jsmpp_v2"
runMode <- 2
dataPath <- '~/jsm22_pp/data/SPY_returns.csv"
tmpOutFile <- '~/Desktop/tmp.csv'
cmd <- paste(prog, runMode, dataPath, '>', tmpOutFile)
#./cpp/cmake-build-release/jsmpp_v2 1 "data/SPY_returns.csv" > ~/Desktop/tmp.csv
cmd
system(cmd)
prog <- "~/jsm22_pp/cpp/cmake-build-release/jsmpp_v2"
runMode <- 2
dataPath <- "~/jsm22_pp/data/SPY_returns.csv"
tmpOutFile <- "~/Desktop/tmp.csv"
cmd <- paste(prog, runMode, dataPath, '>', tmpOutFile)
#./cpp/cmake-build-release/jsmpp_v2 1 "data/SPY_returns.csv" > ~/Desktop/tmp.csv
cmd
system(cmd)
cmd
setwd("~/jsm22_pp/")
setwd("~/jsm22_pp/")
prog <- "./cpp/cmake-build-release/jsmpp_v2"
runMode <- 2
dataPath <- "./data/SPY_returns.csv"
tmpOutFile <- "~/Desktop/tmp.csv"
cmd <- paste(prog, runMode, dataPath, '>', tmpOutFile)
#./cpp/cmake-build-release/jsmpp_v2 1 "data/SPY_returns.csv" > ~/Desktop/tmp.csv
cmd
system(cmd)
runMode <- 5
dataPath <- "./data/SPY_returns.csv"
tmpOutFile <- "~/Desktop/tmp.csv"
cmd <- paste(prog, runMode, dataPath, '>', tmpOutFile)
#./cpp/cmake-build-release/jsmpp_v2 1 "data/SPY_returns.csv" > ~/Desktop/tmp.csv
cmd
system(cmd)
runModes <- c(2,5,8,11,14,17,20)
outFiles <- c("lw_aux_prior.txt", "lw_aux_csv.txt", "lw2_prior.txt","lw2_csv.txt", "swarm_prior.txt", "swarm_csv.txt", "pf_est.txt")
runModes <- c(2,5,8,11,14,17,20)
idx <- 2
runModes <- c(2,5,8,11,14,17,20)
# have to change directory because some filepaths are hardcoded relative style
setwd("~/jsm22_pp/")
prog <- "./cpp/cmake-build-release/jsmpp_v2"
runModes <- c(2,5,8,11,14,17,20)
dataPath <- "./data/SPY_returns.csv"
outFiles <- c("lw_aux_prior.txt", "lw_aux_csv.txt", "lw2_prior.txt","lw2_csv.txt", "swarm_prior.txt", "swarm_csv.txt", "pf_est.txt")
tmpOutFile <- "./data/cond_likes/derp.csv"
idx <- 2
cmd <- paste(prog, runModes[idx], dataPath, '>', outFiles[idx])
cmd
system(cmd)
idx <- 3
cmd <- paste(prog, runModes[idx], dataPath, '>', outFiles[idx])
cmd
system(cmd)
idx <- 4
cmd <- paste(prog, runModes[idx], dataPath, '>', outFiles[idx])
cmd
system(cmd)
idx <- 5
cmd <- paste(prog, runModes[idx], dataPath, '>', outFiles[idx])
cmd
system(cmd)
cmd <- paste(prog, runModes[idx], dataPath, '>', outFiles[idx])
cmd
system(cmd)
cmd
setwd("~/jsm22_pp/data/")
colMeans(read.csv("param_samples.csv", header=F))
parEstimates <- colMeans(read.csv("param_samples.csv", header=F))
phiGood <- (phiLow < parEstimates[1]) & (parEstimates[1] < phiHigh)
# changes made here will be propogated to many files
phiLow <- .5
phiHigh <- .9
muLow <- -2
muHigh <- 2
sigmaLow <- .001
sigmaHigh <- 5
rhoLow <- -.7
rhoHigh <- -.05
setwd("~/jsm22_pp/data/")
parEstimates <- colMeans(read.csv("param_samples.csv", header=F))
phiGood <- (phiLow < parEstimates[1]) & (parEstimates[1] < phiHigh)
parEstimates <- colMeans(read.csv("param_samples.csv", header=F))
phiGood <- (phiLow < parEstimates[1]) & (parEstimates[1] < phiHigh)
muGood <- (muLow < parEstimates[2]) & (parEstimates[2] < muHigh)
SigmaGood <- (sigmaLow < parEstimates[3]) & (parEstimates[3] < sigmaHigh)
rhoGood <- (rhoLow < parEstimates[4]) & (parEstimates[4] < rhoHigh)
phiGood
muGood
SigmaGood
sigmaGood <- (sigmaLow < parEstimates[3]) & (parEstimates[3] < sigmaHigh)
rhoGood <- (rhoLow < parEstimates[4]) & (parEstimates[4] < rhoHigh)
stopifnot(phiGood & muGood & sigmaGood & rhoGood)
parEstimates[3]
sigmaLow <- .0001
sigmaHigh <- 5
rhoLow <- -.7
rhoHigh <- -.05
# check your highs and lows are consistent with the data
setwd("~/jsm22_pp/data/")
parEstimates <- colMeans(read.csv("param_samples.csv", header=F))
phiGood <- (phiLow < parEstimates[1]) & (parEstimates[1] < phiHigh)
muGood <- (muLow < parEstimates[2]) & (parEstimates[2] < muHigh)
sigmaGood <- (sigmaLow < parEstimates[3]) & (parEstimates[3] < sigmaHigh)
rhoGood <- (rhoLow < parEstimates[4]) & (parEstimates[4] < rhoHigh)
stopifnot(phiGood & muGood & sigmaGood & rhoGood)
dte <- 5
delta <- .99
# config1.csv
# delta, phi_l, phi_u, mu_l, mu_u, sig_l, sig_u, rho_l, rho_u, dte
paste(delta, phiLow, phiHigh, muLow, muHigh, sigmaLow, sigmaHigh, rhoLow, rhoHigh, dte)
# config1.csv
# delta, phi_l, phi_u, mu_l, mu_u, sig_l, sig_u, rho_l, rho_u, dte
paste(delta, phiLow, phiHigh, muLow, muHigh, sigmaLow, sigmaHigh, rhoLow, rhoHigh, dte, sep = ", ")
# config1.csv
# delta, phi_l, phi_u, mu_l, mu_u, sig_l, sig_u, rho_l, rho_u, dte
options("scipen"=10)    # set high penalty for scientific display
paste(delta, phiLow, phiHigh, muLow, muHigh, sigmaLow, sigmaHigh, rhoLow, rhoHigh, dte, sep = ", ")
myStr <- paste(delta, phiLow, phiHigh, muLow, muHigh, sigmaLow, sigmaHigh, rhoLow, rhoHigh, dte, sep = ", ")
write.table("../configs/config1.csv", append = F, quote = F, col.names = F)
paramSamplesFile <- "data/paramSamples.csv"
# config 2
# delta, param_samples_filename, dte
myStr <- paste(delta, paramSamplesFile, dte, sep = ", ")
write.table(myStr, "../configs/config1.csv", append = F, quote = F, col.names = F)
# config1.csv
# delta, phi_l, phi_u, mu_l, mu_u, sig_l, sig_u, rho_l, rho_u, dte
options("scipen"=10)    # set high penalty for scientific display
myStr <- paste(delta, phiLow, phiHigh, muLow, muHigh, sigmaLow, sigmaHigh, rhoLow, rhoHigh, dte, sep = ", ")
write.table(myStr, "../configs/config1.csv", append = F, quote = F, col.names = F)
# config 2
# delta, param_samples_filename, dte
myStr <- paste(delta, paramSamplesFile, dte, sep = ", ")
write.table(myStr, "../configs/config2.csv", append = F, quote = F, col.names = F)
write.table(myStr, "../configs/config2.csv", append = F, quote = F, col.names = F, row.names = F)
# config1.csv
# delta, phi_l, phi_u, mu_l, mu_u, sig_l, sig_u, rho_l, rho_u, dte
options("scipen"=10)    # set high penalty for scientific display
myStr <- paste(delta, phiLow, phiHigh, muLow, muHigh, sigmaLow, sigmaHigh, rhoLow, rhoHigh, dte, sep = ", ")
write.table(myStr, "../configs/config1.csv", append = F, quote = F, col.names = F, row.names = F)
